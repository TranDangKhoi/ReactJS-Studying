{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP Victus\\\\Documents\\\\GitHub\\\\Contain All (Github)\\\\Evondev-ReactJS-Course\\\\my-app\\\\src\\\\components\\\\Tictactoe\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { winnerCalculate } from \"../helper\";\nimport Board from \"./Board\";\nimport \"./GameStyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  // const [board, setBoard] = useState(Array(9).fill(null));\n  // const [xIsNext, setXIsNext] = useState(true); // true thì sẽ đánh X, false sẽ đánh O\n  const [state, setState] = useState({\n    board: Array(9).fill(null),\n    xIsNext: true\n  });\n  const winner = winnerCalculate(state.board);\n\n  const handleClick = index => {\n    const boardCopy = [...state.board]; // copy cái board ra thành một mảng mới\n    // tại sao lại làm như vậy u may ask ??\n    // bởi vì mình đang dùng cái state ban đầu (board) và sau khi bạn đã học đến by references trong mảng\n    // bạn sẽ biết rằng là khi ta thay đổi giá trị trong mảng thì nó sẽ ảnh hưởng đến giá trị gốc\n    // vì vậy ta phải tạo ra một bản copy để đề phòng trường hợp đó xảy ra\n\n    if (winner || boardCopy[index]) {\n      // nếu đã có người chiến thắng (winner === X hoặc winner === O hoặc tổng quan ra thì là winner !== null ), hoặc ô vuông đã được nhấn thì không cho nhấn nữa\n      // nếu không có điều kiện boardCopy[index] = true thì khi nhấn tiếp lại vào ô vuông đó\n      // sẽ xảy ra một lỗi là ô vuông sẽ chuyển X O luân phiên (tùy theo giá trị boolean của xIsNext trong state)\n      console.log(\"Hello\");\n      return;\n    } // boardCopy[index] = xIsNext ? \"X\" : \"O\"; // nếu X là lượt đánh tiếp theo thì thay đổi lần click tiếp theo giá trị là X, còn không thì là O\n    // Viết kiểu dài dòng\n\n\n    if (state.xIsNext === true) {\n      boardCopy[index] = \"X\";\n    } else {\n      boardCopy[index] = \"O\";\n    } // setBoard(boardCopy);\n    // setXIsNext((xIsNext) => !xIsNext);\n\n\n    setState = {\n      board: boardCopy,\n      xIsNext: !state.xIsNext\n    };\n  };\n\n  const handleReset = () => {\n    setBoard(Array(9).fill(null));\n    setXIsNext(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-winner\",\n      children: winner ? `Winner is ${winner}` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-reset\",\n      onClick: handleReset,\n      children: \"Reset game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"PlAe+bVAWL8nZMvjM4JrGLeMOzk=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","winnerCalculate","Board","Game","state","setState","board","Array","fill","xIsNext","winner","handleClick","index","boardCopy","console","log","handleReset","setBoard","setXIsNext"],"sources":["C:/Users/HP Victus/Documents/GitHub/Contain All (Github)/Evondev-ReactJS-Course/my-app/src/components/Tictactoe/Game.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { winnerCalculate } from \"../helper\";\r\nimport Board from \"./Board\";\r\nimport \"./GameStyle.css\";\r\n\r\nconst Game = () => {\r\n  // const [board, setBoard] = useState(Array(9).fill(null));\r\n  // const [xIsNext, setXIsNext] = useState(true); // true thì sẽ đánh X, false sẽ đánh O\r\n  const [state, setState] = useState({\r\n    board: Array(9).fill(null),\r\n    xIsNext: true,\r\n  });\r\n  const winner = winnerCalculate(state.board);\r\n  const handleClick = (index) => {\r\n    const boardCopy = [...state.board]; // copy cái board ra thành một mảng mới\r\n    // tại sao lại làm như vậy u may ask ??\r\n    // bởi vì mình đang dùng cái state ban đầu (board) và sau khi bạn đã học đến by references trong mảng\r\n    // bạn sẽ biết rằng là khi ta thay đổi giá trị trong mảng thì nó sẽ ảnh hưởng đến giá trị gốc\r\n    // vì vậy ta phải tạo ra một bản copy để đề phòng trường hợp đó xảy ra\r\n    if (winner || boardCopy[index]) {\r\n      // nếu đã có người chiến thắng (winner === X hoặc winner === O hoặc tổng quan ra thì là winner !== null ), hoặc ô vuông đã được nhấn thì không cho nhấn nữa\r\n      // nếu không có điều kiện boardCopy[index] = true thì khi nhấn tiếp lại vào ô vuông đó\r\n      // sẽ xảy ra một lỗi là ô vuông sẽ chuyển X O luân phiên (tùy theo giá trị boolean của xIsNext trong state)\r\n      console.log(\"Hello\");\r\n      return;\r\n    }\r\n    // boardCopy[index] = xIsNext ? \"X\" : \"O\"; // nếu X là lượt đánh tiếp theo thì thay đổi lần click tiếp theo giá trị là X, còn không thì là O\r\n    // Viết kiểu dài dòng\r\n    if (state.xIsNext === true) {\r\n      boardCopy[index] = \"X\";\r\n    } else {\r\n      boardCopy[index] = \"O\";\r\n    }\r\n    // setBoard(boardCopy);\r\n    // setXIsNext((xIsNext) => !xIsNext);\r\n    setState = {\r\n      board: boardCopy,\r\n      xIsNext: !state.xIsNext,\r\n    };\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setXIsNext(true);\r\n  };\r\n  return (\r\n    <div>\r\n      <Board cells={board} onClick={handleClick}></Board>\r\n      <div className=\"game-winner\">{winner ? `Winner is ${winner}` : \"\"}</div>\r\n      <button className=\"game-reset\" onClick={handleReset}>\r\n        Reset game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACjB;EACA;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;IACjCM,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAD0B;IAEjCC,OAAO,EAAE;EAFwB,CAAD,CAAlC;EAIA,MAAMC,MAAM,GAAGT,eAAe,CAACG,KAAK,CAACE,KAAP,CAA9B;;EACA,MAAMK,WAAW,GAAIC,KAAD,IAAW;IAC7B,MAAMC,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACE,KAAV,CAAlB,CAD6B,CACO;IACpC;IACA;IACA;IACA;;IACA,IAAII,MAAM,IAAIG,SAAS,CAACD,KAAD,CAAvB,EAAgC;MAC9B;MACA;MACA;MACAE,OAAO,CAACC,GAAR,CAAY,OAAZ;MACA;IACD,CAZ4B,CAa7B;IACA;;;IACA,IAAIX,KAAK,CAACK,OAAN,KAAkB,IAAtB,EAA4B;MAC1BI,SAAS,CAACD,KAAD,CAAT,GAAmB,GAAnB;IACD,CAFD,MAEO;MACLC,SAAS,CAACD,KAAD,CAAT,GAAmB,GAAnB;IACD,CAnB4B,CAoB7B;IACA;;;IACAP,QAAQ,GAAG;MACTC,KAAK,EAAEO,SADE;MAETJ,OAAO,EAAE,CAACL,KAAK,CAACK;IAFP,CAAX;EAID,CA1BD;;EA4BA,MAAMO,WAAW,GAAG,MAAM;IACxBC,QAAQ,CAACV,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAR;IACAU,UAAU,CAAC,IAAD,CAAV;EACD,CAHD;;EAIA,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,KAAK,EAAEZ,KAAd;MAAqB,OAAO,EAAEK;IAA9B;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,aAAf;MAAA,UAA8BD,MAAM,GAAI,aAAYA,MAAO,EAAvB,GAA2B;IAA/D;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,SAAS,EAAC,YAAlB;MAA+B,OAAO,EAAEM,WAAxC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAjDD;;GAAMb,I;;KAAAA,I;AAmDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}