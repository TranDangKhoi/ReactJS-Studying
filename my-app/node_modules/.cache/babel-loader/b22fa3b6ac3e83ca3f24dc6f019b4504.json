{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP Victus\\\\Documents\\\\GitHub\\\\Contain All (Github)\\\\Evondev-ReactJS-Course\\\\my-app\\\\src\\\\components\\\\Tictactoe (useReducer version)\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState } from \"react\";\nimport { winnerCalculate } from \"../helper\";\nimport Board from \"./Board\";\nimport \"./GameStyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  board: Array(9).fill(null),\n  xIsNext: true\n}; // immutable state (không thể chỉnh sửa state)\n// muốn sửa thì tạo ra một bản clone\n\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case \"Click\":\n      const {\n        board,\n        xIsNext\n      } = state; // destructuring\n\n      const {\n        index,\n        winner\n      } = action.payload;\n      if (winner || board[index]) return state;\n      const nextState = JSON.parse(JSON.stringify(state)); // clone state\n\n      nextState.xIsNext = !xIsNext;\n      nextState.board[index] = xIsNext ? \"X\" : \"O\";\n      return nextState;\n    // console.log(state, action.payload);\n\n    case \"Reset\":\n      nextState.xIsNext = xIsNext;\n      nextState.board = Array(9).fill(null);\n      return nextState;\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nconst Game = () => {\n  _s();\n\n  // const [board, setBoard] = useState(Array(9).fill(null));\n  // const [xIsNext, setXIsNext] = useState(true); // true thì sẽ đánh X, false sẽ đánh O\n  const [state, dispatch] = useReducer(gameReducer, initialState); // const action = {type:\"Click\", payload{}}\n  // dispatch({type: \"Click\"})\n  // const [state, setState] = useState({\n  //   board: Array(9).fill(null),\n  //   xIsNext: true,\n  // });\n\n  const winner = winnerCalculate(state.board);\n\n  const handleClick = index => {\n    // const boardCopy = [...state.board];\n    // if (winner || boardCopy[index]) {\n    //   return;\n    // }\n    // dispatch(action) -> action này được truyền vào hàm gameReducer ở bên trên\n    dispatch({\n      type: \"Click\",\n      payload: {\n        index,\n        // index : index\n        winner\n      }\n    });\n  };\n\n  const handleReset = () => {\n    dispatch({\n      type: \"Reset\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: state.board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-winner\",\n      children: winner ? `Winner is ${winner}` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-reset\",\n      onClick: handleReset,\n      children: \"Reset game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useReducer","useState","winnerCalculate","Board","initialState","board","Array","fill","xIsNext","gameReducer","state","action","type","index","winner","payload","nextState","JSON","parse","stringify","Game","dispatch","handleClick","handleReset"],"sources":["C:/Users/HP Victus/Documents/GitHub/Contain All (Github)/Evondev-ReactJS-Course/my-app/src/components/Tictactoe (useReducer version)/Game.js"],"sourcesContent":["import React, { useReducer, useState } from \"react\";\r\nimport { winnerCalculate } from \"../helper\";\r\nimport Board from \"./Board\";\r\nimport \"./GameStyle.css\";\r\n\r\nconst initialState = {\r\n  board: Array(9).fill(null),\r\n  xIsNext: true,\r\n};\r\n// immutable state (không thể chỉnh sửa state)\r\n// muốn sửa thì tạo ra một bản clone\r\nconst gameReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"Click\":\r\n      const { board, xIsNext } = state; // destructuring\r\n      const { index, winner } = action.payload;\r\n      if (winner || board[index]) return state;\r\n      const nextState = JSON.parse(JSON.stringify(state)); // clone state\r\n      nextState.xIsNext = !xIsNext;\r\n      nextState.board[index] = xIsNext ? \"X\" : \"O\";\r\n      return nextState;\r\n    // console.log(state, action.payload);\r\n    case \"Reset\":\r\n      nextState.xIsNext = xIsNext;\r\n      nextState.board = Array(9).fill(null);\r\n      return nextState;\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n\r\nconst Game = () => {\r\n  // const [board, setBoard] = useState(Array(9).fill(null));\r\n  // const [xIsNext, setXIsNext] = useState(true); // true thì sẽ đánh X, false sẽ đánh O\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  // const action = {type:\"Click\", payload{}}\r\n  // dispatch({type: \"Click\"})\r\n  // const [state, setState] = useState({\r\n  //   board: Array(9).fill(null),\r\n  //   xIsNext: true,\r\n  // });\r\n  const winner = winnerCalculate(state.board);\r\n  const handleClick = (index) => {\r\n    // const boardCopy = [...state.board];\r\n    // if (winner || boardCopy[index]) {\r\n    //   return;\r\n    // }\r\n    // dispatch(action) -> action này được truyền vào hàm gameReducer ở bên trên\r\n    dispatch({\r\n      type: \"Click\",\r\n      payload: {\r\n        index, // index : index\r\n        winner,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    dispatch({\r\n      type: \"Reset\",\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <Board cells={state.board} onClick={handleClick}></Board>\r\n      <div className=\"game-winner\">{winner ? `Winner is ${winner}` : \"\"}</div>\r\n      <button className=\"game-reset\" onClick={handleReset}>\r\n        Reset game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,iBAAP;;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADY;EAEnBC,OAAO,EAAE;AAFU,CAArB,C,CAIA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,OAAL;MACE,MAAM;QAAEP,KAAF;QAASG;MAAT,IAAqBE,KAA3B,CADF,CACoC;;MAClC,MAAM;QAAEG,KAAF;QAASC;MAAT,IAAoBH,MAAM,CAACI,OAAjC;MACA,IAAID,MAAM,IAAIT,KAAK,CAACQ,KAAD,CAAnB,EAA4B,OAAOH,KAAP;MAC5B,MAAMM,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,KAAf,CAAX,CAAlB,CAJF,CAIuD;;MACrDM,SAAS,CAACR,OAAV,GAAoB,CAACA,OAArB;MACAQ,SAAS,CAACX,KAAV,CAAgBQ,KAAhB,IAAyBL,OAAO,GAAG,GAAH,GAAS,GAAzC;MACA,OAAOQ,SAAP;IACF;;IACA,KAAK,OAAL;MACEA,SAAS,CAACR,OAAV,GAAoBA,OAApB;MACAQ,SAAS,CAACX,KAAV,GAAkBC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAlB;MACA,OAAOS,SAAP;;IACF;MACE;EAfJ;;EAiBA,OAAON,KAAP;AACD,CAnBD;;AAqBA,MAAMU,IAAI,GAAG,MAAM;EAAA;;EACjB;EACA;EACA,MAAM,CAACV,KAAD,EAAQW,QAAR,IAAoBrB,UAAU,CAACS,WAAD,EAAcL,YAAd,CAApC,CAHiB,CAIjB;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMU,MAAM,GAAGZ,eAAe,CAACQ,KAAK,CAACL,KAAP,CAA9B;;EACA,MAAMiB,WAAW,GAAIT,KAAD,IAAW;IAC7B;IACA;IACA;IACA;IACA;IACAQ,QAAQ,CAAC;MACPT,IAAI,EAAE,OADC;MAEPG,OAAO,EAAE;QACPF,KADO;QACA;QACPC;MAFO;IAFF,CAAD,CAAR;EAOD,CAbD;;EAeA,MAAMS,WAAW,GAAG,MAAM;IACxBF,QAAQ,CAAC;MACPT,IAAI,EAAE;IADC,CAAD,CAAR;EAGD,CAJD;;EAKA,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,KAAK,EAAEF,KAAK,CAACL,KAApB;MAA2B,OAAO,EAAEiB;IAApC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,aAAf;MAAA,UAA8BR,MAAM,GAAI,aAAYA,MAAO,EAAvB,GAA2B;IAA/D;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,SAAS,EAAC,YAAlB;MAA+B,OAAO,EAAES,WAAxC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAxCD;;GAAMH,I;;KAAAA,I;AA0CN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}